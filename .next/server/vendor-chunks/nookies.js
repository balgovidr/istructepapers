"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nookies";
exports.ids = ["vendor-chunks/nookies"];
exports.modules = {

/***/ "(ssr)/./node_modules/nookies/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/nookies/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.destroyCookie = exports.setCookie = exports.parseCookies = void 0;\nvar cookie = __webpack_require__(/*! cookie */ \"(ssr)/./node_modules/cookie/index.js\");\nvar setCookieParser = __webpack_require__(/*! set-cookie-parser */ \"(ssr)/./node_modules/set-cookie-parser/lib/set-cookie.js\");\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/nookies/dist/utils.js\");\n/**\n * Parses cookies.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param options Options that we pass down to `cookie` library.\n */ function parseCookies(ctx, options) {\n    var _a, _b;\n    if ((_b = (_a = ctx === null || ctx === void 0 ? void 0 : ctx.req) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.cookie) {\n        return cookie.parse(ctx.req.headers.cookie, options);\n    }\n    if (utils_1.isBrowser()) {\n        return cookie.parse(document.cookie, options);\n    }\n    return {};\n}\nexports.parseCookies = parseCookies;\n/**\n * Sets a cookie.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param name The name of your cookie.\n * @param value The value of your cookie.\n * @param options Options that we pass down to `cookie` library.\n */ function setCookie(ctx, name, value, options) {\n    var _a, _b;\n    if (options === void 0) {\n        options = {};\n    }\n    // SSR\n    if (((_a = ctx === null || ctx === void 0 ? void 0 : ctx.res) === null || _a === void 0 ? void 0 : _a.getHeader) && ctx.res.setHeader) {\n        // Check if response has finished and warn about it.\n        if ((_b = ctx === null || ctx === void 0 ? void 0 : ctx.res) === null || _b === void 0 ? void 0 : _b.finished) {\n            console.warn('Not setting \"' + name + '\" cookie. Response has finished.');\n            console.warn(\"You should set cookie before res.send()\");\n            return {};\n        }\n        /**\n         * Load existing cookies from the header and parse them.\n         */ var cookies = ctx.res.getHeader(\"Set-Cookie\") || [];\n        if (typeof cookies === \"string\") cookies = [\n            cookies\n        ];\n        if (typeof cookies === \"number\") cookies = [];\n        /**\n         * Parse cookies but ignore values - we've already encoded\n         * them in the previous call.\n         */ var parsedCookies = setCookieParser.parse(cookies, {\n            decodeValues: false\n        });\n        /**\n         * We create the new cookie and make sure that none of\n         * the existing cookies match it.\n         */ var newCookie_1 = utils_1.createCookie(name, value, options);\n        var cookiesToSet_1 = [];\n        parsedCookies.forEach(function(parsedCookie) {\n            if (!utils_1.areCookiesEqual(parsedCookie, newCookie_1)) {\n                /**\n                 * We serialize the cookie back to the original format\n                 * if it isn't the same as the new one.\n                 */ var serializedCookie = cookie.serialize(parsedCookie.name, parsedCookie.value, __assign({\n                    // we prevent reencoding by default, but you might override it\n                    encode: function(val) {\n                        return val;\n                    }\n                }, parsedCookie));\n                cookiesToSet_1.push(serializedCookie);\n            }\n        });\n        cookiesToSet_1.push(cookie.serialize(name, value, options));\n        // Update the header.\n        ctx.res.setHeader(\"Set-Cookie\", cookiesToSet_1);\n    }\n    // Browser\n    if (utils_1.isBrowser()) {\n        if (options && options.httpOnly) {\n            throw new Error(\"Can not set a httpOnly cookie in the browser.\");\n        }\n        document.cookie = cookie.serialize(name, value, options);\n    }\n    return {};\n}\nexports.setCookie = setCookie;\n/**\n * Destroys a cookie with a particular name.\n *\n * @param ctx NextJS page or API context, express context, null or undefined.\n * @param name Cookie name.\n * @param options Options that we pass down to `cookie` library.\n */ function destroyCookie(ctx, name, options) {\n    /**\n     * We forward the request destroy to setCookie function\n     * as it is the same function with modified maxAge value.\n     */ return setCookie(ctx, name, \"\", __assign(__assign({}, options || {}), {\n        maxAge: -1\n    }));\n}\nexports.destroyCookie = destroyCookie;\n/* Utility Exports */ exports[\"default\"] = {\n    set: setCookie,\n    get: parseCookies,\n    destroy: destroyCookie\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nookies/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/nookies/dist/utils.js":
/*!********************************************!*\
  !*** ./node_modules/nookies/dist/utils.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.areCookiesEqual = exports.hasSameProperties = exports.createCookie = exports.isBrowser = void 0;\n/**\n * Tells whether we are in a browser or server.\n */ function isBrowser() {\n    return \"undefined\" !== \"undefined\";\n}\nexports.isBrowser = isBrowser;\n/**\n * Create an instance of the Cookie interface\n */ function createCookie(name, value, options) {\n    var sameSite = options.sameSite;\n    if (sameSite === true) {\n        sameSite = \"strict\";\n    }\n    if (sameSite === undefined || sameSite === false) {\n        sameSite = \"lax\";\n    }\n    var cookieToSet = __assign(__assign({}, options), {\n        sameSite: sameSite\n    });\n    delete cookieToSet.encode;\n    return __assign({\n        name: name,\n        value: value\n    }, cookieToSet);\n}\nexports.createCookie = createCookie;\n/**\n * Tells whether given objects have the same properties.\n */ function hasSameProperties(a, b) {\n    var aProps = Object.getOwnPropertyNames(a);\n    var bProps = Object.getOwnPropertyNames(b);\n    if (aProps.length !== bProps.length) {\n        return false;\n    }\n    for(var i = 0; i < aProps.length; i++){\n        var propName = aProps[i];\n        if (a[propName] !== b[propName]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.hasSameProperties = hasSameProperties;\n/**\n * Compare the cookie and return true if the cookies have equivalent\n * options and the cookies would be overwritten in the browser storage.\n *\n * @param a first Cookie for comparison\n * @param b second Cookie for comparison\n */ function areCookiesEqual(a, b) {\n    var sameSiteSame = a.sameSite === b.sameSite;\n    if (typeof a.sameSite === \"string\" && typeof b.sameSite === \"string\") {\n        sameSiteSame = a.sameSite.toLowerCase() === b.sameSite.toLowerCase();\n    }\n    return hasSameProperties(__assign(__assign({}, a), {\n        sameSite: undefined\n    }), __assign(__assign({}, b), {\n        sameSite: undefined\n    })) && sameSiteSame;\n}\nexports.areCookiesEqual = areCookiesEqual; /* Functions */  //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9va2llcy9kaXN0L3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsV0FBVyxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFFBQVEsSUFBSztJQUN0Q0EsV0FBV0MsT0FBT0MsTUFBTSxJQUFJLFNBQVNDLENBQUM7UUFDbEMsSUFBSyxJQUFJQyxHQUFHQyxJQUFJLEdBQUdDLElBQUlDLFVBQVVDLE1BQU0sRUFBRUgsSUFBSUMsR0FBR0QsSUFBSztZQUNqREQsSUFBSUcsU0FBUyxDQUFDRixFQUFFO1lBQ2hCLElBQUssSUFBSUksS0FBS0wsRUFBRyxJQUFJSCxPQUFPUyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUixHQUFHSyxJQUN6RE4sQ0FBQyxDQUFDTSxFQUFFLEdBQUdMLENBQUMsQ0FBQ0ssRUFBRTtRQUNuQjtRQUNBLE9BQU9OO0lBQ1g7SUFDQSxPQUFPSCxTQUFTYSxLQUFLLENBQUMsSUFBSSxFQUFFTjtBQUNoQztBQUNBTiw4Q0FBNkM7SUFBRWUsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUdBLHlCQUF5QixHQUFHQSxvQkFBb0IsR0FBR0EsaUJBQWlCLEdBQUcsS0FBSztBQUN0Rzs7Q0FFQyxHQUNELFNBQVNLO0lBQ0wsT0FBTyxnQkFBa0I7QUFDN0I7QUFDQUwsaUJBQWlCLEdBQUdLO0FBQ3BCOztDQUVDLEdBQ0QsU0FBU0QsYUFBYUUsSUFBSSxFQUFFTCxLQUFLLEVBQUVNLE9BQU87SUFDdEMsSUFBSUMsV0FBV0QsUUFBUUMsUUFBUTtJQUMvQixJQUFJQSxhQUFhLE1BQU07UUFDbkJBLFdBQVc7SUFDZjtJQUNBLElBQUlBLGFBQWFDLGFBQWFELGFBQWEsT0FBTztRQUM5Q0EsV0FBVztJQUNmO0lBQ0EsSUFBSUUsY0FBY3pCLFNBQVNBLFNBQVMsQ0FBQyxHQUFHc0IsVUFBVTtRQUFFQyxVQUFVQTtJQUFTO0lBQ3ZFLE9BQU9FLFlBQVlDLE1BQU07SUFDekIsT0FBTzFCLFNBQVM7UUFBRXFCLE1BQU1BO1FBQU1MLE9BQU9BO0lBQU0sR0FBR1M7QUFDbEQ7QUFDQVYsb0JBQW9CLEdBQUdJO0FBQ3ZCOztDQUVDLEdBQ0QsU0FBU0Qsa0JBQWtCUyxDQUFDLEVBQUVDLENBQUM7SUFDM0IsSUFBSUMsU0FBUzVCLE9BQU82QixtQkFBbUIsQ0FBQ0g7SUFDeEMsSUFBSUksU0FBUzlCLE9BQU82QixtQkFBbUIsQ0FBQ0Y7SUFDeEMsSUFBSUMsT0FBT3JCLE1BQU0sS0FBS3VCLE9BQU92QixNQUFNLEVBQUU7UUFDakMsT0FBTztJQUNYO0lBQ0EsSUFBSyxJQUFJSCxJQUFJLEdBQUdBLElBQUl3QixPQUFPckIsTUFBTSxFQUFFSCxJQUFLO1FBQ3BDLElBQUkyQixXQUFXSCxNQUFNLENBQUN4QixFQUFFO1FBQ3hCLElBQUlzQixDQUFDLENBQUNLLFNBQVMsS0FBS0osQ0FBQyxDQUFDSSxTQUFTLEVBQUU7WUFDN0IsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPO0FBQ1g7QUFDQWpCLHlCQUF5QixHQUFHRztBQUM1Qjs7Ozs7O0NBTUMsR0FDRCxTQUFTRCxnQkFBZ0JVLENBQUMsRUFBRUMsQ0FBQztJQUN6QixJQUFJSyxlQUFlTixFQUFFSixRQUFRLEtBQUtLLEVBQUVMLFFBQVE7SUFDNUMsSUFBSSxPQUFPSSxFQUFFSixRQUFRLEtBQUssWUFBWSxPQUFPSyxFQUFFTCxRQUFRLEtBQUssVUFBVTtRQUNsRVUsZUFBZU4sRUFBRUosUUFBUSxDQUFDVyxXQUFXLE9BQU9OLEVBQUVMLFFBQVEsQ0FBQ1csV0FBVztJQUN0RTtJQUNBLE9BQVFoQixrQkFBa0JsQixTQUFTQSxTQUFTLENBQUMsR0FBRzJCLElBQUk7UUFBRUosVUFBVUM7SUFBVSxJQUFJeEIsU0FBU0EsU0FBUyxDQUFDLEdBQUc0QixJQUFJO1FBQUVMLFVBQVVDO0lBQVUsT0FBT1M7QUFDekk7QUFDQWxCLHVCQUF1QixHQUFHRSxpQkFDMUIsYUFBYSxJQUNiLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lzdHJ1Y3RlcGFwZXJzX3YyLy4vbm9kZV9tb2R1bGVzL25vb2tpZXMvZGlzdC91dGlscy5qcz9jMTU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXJlQ29va2llc0VxdWFsID0gZXhwb3J0cy5oYXNTYW1lUHJvcGVydGllcyA9IGV4cG9ydHMuY3JlYXRlQ29va2llID0gZXhwb3J0cy5pc0Jyb3dzZXIgPSB2b2lkIDA7XG4vKipcbiAqIFRlbGxzIHdoZXRoZXIgd2UgYXJlIGluIGEgYnJvd3NlciBvciBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3Nlcjtcbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBDb29raWUgaW50ZXJmYWNlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvb2tpZShuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBzYW1lU2l0ZSA9IG9wdGlvbnMuc2FtZVNpdGU7XG4gICAgaWYgKHNhbWVTaXRlID09PSB0cnVlKSB7XG4gICAgICAgIHNhbWVTaXRlID0gJ3N0cmljdCc7XG4gICAgfVxuICAgIGlmIChzYW1lU2l0ZSA9PT0gdW5kZWZpbmVkIHx8IHNhbWVTaXRlID09PSBmYWxzZSkge1xuICAgICAgICBzYW1lU2l0ZSA9ICdsYXgnO1xuICAgIH1cbiAgICB2YXIgY29va2llVG9TZXQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgc2FtZVNpdGU6IHNhbWVTaXRlIH0pO1xuICAgIGRlbGV0ZSBjb29raWVUb1NldC5lbmNvZGU7XG4gICAgcmV0dXJuIF9fYXNzaWduKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH0sIGNvb2tpZVRvU2V0KTtcbn1cbmV4cG9ydHMuY3JlYXRlQ29va2llID0gY3JlYXRlQ29va2llO1xuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGdpdmVuIG9iamVjdHMgaGF2ZSB0aGUgc2FtZSBwcm9wZXJ0aWVzLlxuICovXG5mdW5jdGlvbiBoYXNTYW1lUHJvcGVydGllcyhhLCBiKSB7XG4gICAgdmFyIGFQcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGEpO1xuICAgIHZhciBiUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhiKTtcbiAgICBpZiAoYVByb3BzLmxlbmd0aCAhPT0gYlByb3BzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYVByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IGFQcm9wc1tpXTtcbiAgICAgICAgaWYgKGFbcHJvcE5hbWVdICE9PSBiW3Byb3BOYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy5oYXNTYW1lUHJvcGVydGllcyA9IGhhc1NhbWVQcm9wZXJ0aWVzO1xuLyoqXG4gKiBDb21wYXJlIHRoZSBjb29raWUgYW5kIHJldHVybiB0cnVlIGlmIHRoZSBjb29raWVzIGhhdmUgZXF1aXZhbGVudFxuICogb3B0aW9ucyBhbmQgdGhlIGNvb2tpZXMgd291bGQgYmUgb3ZlcndyaXR0ZW4gaW4gdGhlIGJyb3dzZXIgc3RvcmFnZS5cbiAqXG4gKiBAcGFyYW0gYSBmaXJzdCBDb29raWUgZm9yIGNvbXBhcmlzb25cbiAqIEBwYXJhbSBiIHNlY29uZCBDb29raWUgZm9yIGNvbXBhcmlzb25cbiAqL1xuZnVuY3Rpb24gYXJlQ29va2llc0VxdWFsKGEsIGIpIHtcbiAgICB2YXIgc2FtZVNpdGVTYW1lID0gYS5zYW1lU2l0ZSA9PT0gYi5zYW1lU2l0ZTtcbiAgICBpZiAodHlwZW9mIGEuc2FtZVNpdGUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBiLnNhbWVTaXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICBzYW1lU2l0ZVNhbWUgPSBhLnNhbWVTaXRlLnRvTG93ZXJDYXNlKCkgPT09IGIuc2FtZVNpdGUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIChoYXNTYW1lUHJvcGVydGllcyhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYSksIHsgc2FtZVNpdGU6IHVuZGVmaW5lZCB9KSwgX19hc3NpZ24oX19hc3NpZ24oe30sIGIpLCB7IHNhbWVTaXRlOiB1bmRlZmluZWQgfSkpICYmIHNhbWVTaXRlU2FtZSk7XG59XG5leHBvcnRzLmFyZUNvb2tpZXNFcXVhbCA9IGFyZUNvb2tpZXNFcXVhbDtcbi8qIEZ1bmN0aW9ucyAqL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXJlQ29va2llc0VxdWFsIiwiaGFzU2FtZVByb3BlcnRpZXMiLCJjcmVhdGVDb29raWUiLCJpc0Jyb3dzZXIiLCJuYW1lIiwib3B0aW9ucyIsInNhbWVTaXRlIiwidW5kZWZpbmVkIiwiY29va2llVG9TZXQiLCJlbmNvZGUiLCJhIiwiYiIsImFQcm9wcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJiUHJvcHMiLCJwcm9wTmFtZSIsInNhbWVTaXRlU2FtZSIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nookies/dist/utils.js\n");

/***/ })

};
;